package test;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import shs.*;

class HashFunctionTest {

	private SHA_1 sha1 = new SHA_1("");
	private SHA_224 sha224;
	private SHA_256 sha256;
	private SHA_384 sha384;
	private SHA_512 sha512;
	private SHA_512_224 sha512_224;
	private SHA_512_256 sha512_256;

	@Test
	void testTextToBinary() {
		assertEquals("", sha1.textToBinary(""));
	}

	@Test
	void testTextToBinary2() { // all the printable ASCII characters
		assertEquals(
				
				sha1.textToBinary(
						" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"));
	}

	@Test
	void testBinaryToHexadecimal() {
		assertEquals("00", sha1.binaryToHexadecimal("000000"));
	}

	@Test
	void testBinaryToHexadecimal2() {
		assertEquals("52", sha1.binaryToHexadecimal("1010010"));
	}

	@Test
	void testBinaryToHexadecimal3() {
		assertEquals("094acaaf", sha1.binaryToHexadecimal("01001010010101100101010101111"));
	}

	@Test
	void testHexadecimalToBinary() {
		assertEquals("00000000", sha1.hexadecimalToBinary("00"));
	}

	@Test
	void testHexadecimalToBinary2() {
		assertEquals("01010010", sha1.hexadecimalToBinary("52"));
	}

	@Test
	void testHexadecimalToBinary3() {
		assertEquals("00001001010010101100101010101111", sha1.hexadecimalToBinary("094acaaf"));
	}

	@Test
	void testRightShiftOperation() {
		assertEquals("111010", sha1.rightShiftOperation("111010", 0));
	}

	@Test
	void testRightShiftOperation2() {
		assertEquals("011101", sha1.rightShiftOperation("111010", 1));
	}

	@Test
	void testRightShiftOperation3() {
		assertEquals("000001", sha1.rightShiftOperation("111010", 5));
	}

	@Test
	void testRightShiftOperation4() {
		assertEquals("000000", sha1.rightShiftOperation("111010", 15));
	}

	@Test
	void testRightShiftOperation5() {
		assertEquals("00111010001011000101001010010101",
				sha1.rightShiftOperation("11101000101100010100101001010101", 2));
	}

	@Test
	void testRightShiftOperation6() {
		assertEquals("00000000000000000111010001011000",
				sha1.rightShiftOperation("11101000101100010100101001010101", 17));
	}

	@Test
	void testRightShiftOperation7() {
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100",
				sha1.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testRightShiftOperation8() {
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010",
				sha1.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testRightShiftOperationException() {
		assertThrows(NumberFormatException.class, () -> {
			sha1.rightShiftOperation("111010", -9);
		});
	}

	@Test
	void testSHR() {
		assertEquals("111010", sha1.SHR("111010", 0));
	}

	@Test
	void testSHR2() {
		assertEquals("011101", sha1.SHR("111010", 1));
	}

	@Test
	void testSHR3() {
		assertEquals("000001", sha1.SHR("111010", 5));
	}

	@Test
	void testSHR4() {
		assertEquals("000000", sha1.SHR("111010", 15));
	}

	@Test
	void testSHR5() {
		assertEquals("00111010001011000101001010010101", sha1.SHR("11101000101100010100101001010101", 2));
	}

	@Test
	void testSHR6() {
		assertEquals("00000000000000000111010001011000", sha1.SHR("11101000101100010100101001010101", 17));
	}

	@Test
	void testSHR7() {
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100",
				sha1.SHR("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testSHR8() {
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010",
				sha1.SHR("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testSHRException() {
		assertThrows(NumberFormatException.class, () -> {
			sha1.SHR("11", -999);
		});
	}

	@Test
	void testLeftShiftOperation() {
		assertEquals("111010", sha1.leftShiftOperation("111010", 0));
	}

	@Test
	void testLeftShiftOperation2() {
		assertEquals("110110", sha1.leftShiftOperation("111011", 1));
	}

	@Test
	void testLeftShiftOperation3() {
		assertEquals("100000", sha1.leftShiftOperation("111011", 5));
	}

	@Test
	void testLeftShiftOperation4() {
		assertEquals("000000", sha1.leftShiftOperation("111011", 15));
	}

	@Test
	void testLeftShiftOperation5() {
		assertEquals("10100010110001010010100101010100",
				sha1.leftShiftOperation("11101000101100010100101001010101", 2));
	}

	@Test
	void testLeftShiftOperation6() {
		assertEquals("10010100101010100000000000000000",
				sha1.leftShiftOperation("11101000101100010100101001010101", 17));
	}

	@Test
	void testLeftShiftOperation7() {
		assertEquals("1001010010010010101010011101001010101010101101001100101000000000",
				sha1.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testLeftShiftOperation8() {
		assertEquals("0101000000000000000000000000000000000000000000000000000000000000",
				sha1.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testLeftShiftOperationException() {
		assertThrows(NumberFormatException.class, () -> {
			sha1.leftShiftOperation("111010", -1);
		});
	}

	@Test
	void testROTR() {
		assertEquals("111010", sha1.ROTR("111010", 0));
	}

	@Test
	void testROTR2() {
		assertEquals("011101", sha1.ROTR("111010", 1));
	}

	@Test
	void testROTR3() {
		assertEquals("110101", sha1.ROTR("111010", 5));
	}

	@Test
	void testROTR4() {
		assertEquals("01111010001011000101001010010101", sha1.ROTR("11101000101100010100101001010101", 2));
	}

	@Test
	void testROTR5() {
		assertEquals("10100101001010101111010001011000", sha1.ROTR("11101000101100010100101001010101", 17));
	}

	@Test
	void testROTR6() {
		assertEquals("1100101001010010100101001001001010101001110100101010101010110100",
				sha1.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTR7() {
		assertEquals("0101001010010010010101010011101001010101010101101001100101001010",
				sha1.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testROTRException() {
		assertThrows(NumberFormatException.class, () -> {
			sha1.ROTR("1110", -19);
		});
	}

	@Test
	void testROTL() {
		assertEquals("111010", sha1.ROTL("111010", 0));
	}

	@Test
	void testROTL2() {
		assertEquals("110111", sha1.ROTL("111011", 1));
	}

	@Test
	void testROTL3() {
		assertEquals("111101", sha1.ROTL("111011", 5));
	}

	@Test
	void testROTL4() {
		assertEquals("10100010110001010010100101010111", sha1.ROTL("11101000101100010100101001010101", 2));
	}

	@Test
	void testROTL5() {
		assertEquals("10010100101010111101000101100010", sha1.ROTL("11101000101100010100101001010101", 17));
	}

	@Test
	void testROTL6() {
		assertEquals("1001010010010010101010011101001010101010101101001100101001010010",
				sha1.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTL7() {
		assertEquals("0101001010010100101001001001010101001110100101010101010110100110",
				sha1.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testROTLException() {
		assertThrows(NumberFormatException.class, () -> {
			sha1.ROTL("111010", -5);
		});
	}

	@Test
	void testROTLROTR() {
		assertEquals(sha1.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 56),
				sha1.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTLROTR2() {
		assertEquals(sha1.ROTR("0101010100001010011110101010101010101010010110011010101111101010", 5),
				sha1.ROTL("0101010100001010011110101010101010101010010110011010101111101010", 59));
	}

	@Test
	void testCh() {
		assertEquals("0001001111110001001000001000111000101010010101100010010001100111",
				sha1.Ch("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testParity() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				sha1.Parity("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testMaj() {
		assertEquals("0111001101110001000000111110100010101010011111110010010101011101",
				sha1.Maj("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testF() {
		assertEquals("0001001111110001001000001000111000101010010101100010010001100111",
				sha1.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 0));
	}

	@Test
	void testF2() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				sha1.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 39));
	}

	@Test
	void testF3() {
		assertEquals("0111001101110001000000111110100010101010011111110010010101011101",
				sha1.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 40));
	}

	@Test
	void testF4() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				sha1.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 79));
	}

	@Test
	void testFException() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.f("0111101101010011000000110111000011001100011011110110110110011101",
					"1001011101111001000110001000100000101010110101101011010001000101",
					"0111000011110001001000111110111010101010011110010010010101111010", 80);
		});
	}

	@Test
	void testUpperSigma256_0_32bits() {
		assertEquals("00010101101101001101100111111000",
				sha1.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "upper", 0));
	}

	@Test
	void testUpperSigma256_1_32bits() {
		assertEquals("11000001001000100101111110000001",
				sha1.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "upper", 1));
	}

	@Test
	void testLowerSigma256_0_32bits() {
		assertEquals("10010010111110010000011110001000",
				sha1.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "lower", 0));
	}

	@Test
	void testLowerSigma256_1_32bits() {
		assertEquals("00101111000101011110100000111010",
				sha1.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "lower", 1));
	}

	@Test
	void testUpperSigma512_0_64bits() {
		assertEquals("1111001100100011101110010001011001001000010000111000010111001111", sha1.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "upper", 0));
	}

	@Test
	void testUpperSigma512_1_64bits() {
		assertEquals("1001100000001101011001100001100010000110110111010010111000000101", sha1.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "upper", 1));
	}

	@Test
	void testLowerSigma512_0_64bits() {
		assertEquals("1001111010101011001010011010010100111010110101000100000000001100", sha1.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "lower", 0));
	}

	@Test
	void testLowerSigma512_1_64bits() {
		assertEquals("0011000001011101000000010011001011100000101110000111110101111001", sha1.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "lower", 1));
	}

	@Test
	void testSigmaFunctionSplitterException() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 32, "lower",
					-1);
		});
	}

	@Test
	void testSigmaFunctionSplitterException2() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 32, "upper",
					-55);
		});
	}

	@Test
	void testSigmaFunctionSplitterException3() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 64, "LOWER",
					0);
		});
	}

	@Test
	void testSigmaFunctionSplitterException4() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 64, "lower",
					3);
		});
	}

	@Test
	void testSigmaFunctionSplitterException5() {
		assertThrows(IllegalArgumentException.class, () -> {
			sha1.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 128, "lower",
					1);
		});
	}

	@Test
	void testPadMessage_32bitsWords() {
		sha1 = new SHA_1("abc");
		assertEquals(
				
				sha1.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage2_32bitsWords() {
		sha1 = new SHA_1("");
		assertEquals(
				"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				sha1.getBinaryMessagePadded());
	}

	@Test // one block length (binary length = 440 bits)
	void testPadMessage3_32bitsWords() {
		sha224 = new SHA_224("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals(
				"01100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001100000000000000000000000000000000000000000000000000000000000000110111000",
				sha224.getBinaryMessagePadded());
	}

	@Test // binary length = 448 bits exactly (despite the length pad must be added)
	void testPadMessage4_32bitsWords() {
		sha256 = new SHA_256("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals(
				
				sha256.getBinaryMessagePadded());
	}

	@Test // two blocks needed (binary length = 760 bits)
	void testPadMessage5_32bitsWords() {
		sha1 = new SHA_1(
				" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		assertEquals(
				
				sha1.getBinaryMessagePadded());
	}

	@Test // binary length = 960 bits (last block wholly padded)
	void testPadMessage6_32bitsWords() {
		sha224 = new SHA_224(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals(
				
				sha224.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage7_32bitsWords() { // binary length 968
		sha256 = new SHA_256(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829A");
		assertEquals(
				
				sha256.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage8_32bitsWords() { // long phrase
		sha256 = new SHA_256(
				"And what is love? It is a doll dressed up For idleness to cosset, nurse, and dandle; A thing of soft misnomers, so divine That silly youth doth think to make itself Divine by loving, and so goes on Yawning and doting a whole summer long, Till Miss's comb is made a perfect tiara, And common Wellingtons turn Romeo boots; Till Cleopatra lives at Number Seven, And Antony resides in Brunswick Square.");
		assertEquals(
				
				sha256.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage_64bitsWords() {
		sha384 = new SHA_384("abc");
		assertEquals(
				"0110000101100010011000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000",
				sha384.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage2_64bitsWords() {
		sha512 = new SHA_512("");
		assertEquals(
				
				sha512.getBinaryMessagePadded());
	}

	@Test // one block length (binary length = 888 bits)
	void testPadMessage3_64bitsWords() {
		sha512_224 = new SHA_512_224(
				"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals(
				
				sha512_224.getBinaryMessagePadded());
	}

	@Test // binary length = 896 bits exactly (despite the length pad must be added)
	void testPadMessage4_64bitsWords() {
		sha512_256 = new SHA_512_256(
				"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals(
				
				sha512_256.getBinaryMessagePadded());
	}

	@Test // two blocks needed (binary length = 1520 bits)
	void testPadMessage5_64bitsWords() {
		sha384 = new SHA_384(
				" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		assertEquals(
				
				sha384.getBinaryMessagePadded());
	}

	@Test // binary length = 1920 bits (last block wholly padded)
	void testPadMessage6_64bitsWords() {
		sha512 = new SHA_512(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals(
				
				sha512.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage7_64bitsWords() { // binary length 1928
		sha512_224 = new SHA_512_224(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829Ajsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals(
				
				sha512_224.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage8_64bitsWords() { // long phrase
		sha512_256 = new SHA_512_256(
				"And what is love? It is a doll dressed up For idleness to cosset, nurse, and dandle; A thing of soft misnomers, so divine That silly youth doth think to make itself Divine by loving, and so goes on Yawning and doting a whole summer long, Till Miss's comb is made a perfect tiara, And common Wellingtons turn Romeo boots; Till Cleopatra lives at Number Seven, And Antony resides in Brunswick Square.");
		assertEquals(
				
				sha512_256.getBinaryMessagePadded());
	}

	// SHA-1
	@Test
	void testHashComputation_SHA_1() {
		sha1 = new SHA_1("a");
		assertEquals("86f7e437faa5a7fce15d1ddcb9eaeaea377667b8", sha1.computeHash());
	}

	@Test
	void testHashComputation2_SHA_1() {
		sha1 = new SHA_1(""); // empty string
		assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", sha1.computeHash());
	}

	@Test
	void testHashComputation3_SHA_1() {
		sha1 = new SHA_1("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("c1c8bbdc22796e28c0e15163d20899b65621d65a", sha1.computeHash());
	}

	@Test
	void testHashComputation4_SHA_1() {
		sha1 = new SHA_1("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("c2db330f6083854c99d4b5bfb6e8f29f201be699", sha1.computeHash());
	}

	@Test
	void testHashComputation5_SHA_1() {
		sha1 = new SHA_1(
				" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		assertEquals("e4f8188cdca2a68b074005e2ccab5b67842c6fc7", sha1.computeHash());
	}

	@Test
	void testHashComputation6_SHA_1() {
		sha1 = new SHA_1(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals("3775e8d97dac1f0a26ac1418d6009698fa6c8631", sha1.computeHash());
	}

	@Test
	void testHashComputation7_SHA_1() {
		sha1 = new SHA_1(
				"jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829A");
		assertEquals("111dd7f517ac9fcc76308b43877df74bf80be10c", sha1.computeHash());
	}

	@Test
	void testHashComputation8_SHA_1() {
		sha1 = new SHA_1(
				"And what is love? It is a doll dressed up For idleness to cosset, nurse, and dandle; A thing of soft misnomers, so divine That silly youth doth think to make itself Divine by loving, and so goes on Yawning and doting a whole summer long, Till Miss's comb is made a perfect tiara, And common Wellingtons turn Romeo boots; Till Cleopatra lives at Number Seven, And Antony resides in Brunswick Square.");
		assertEquals("1af89fe6c87f9ce56fe768e5598c9876659052e1", sha1.computeHash());
	}

	// SHA-256
	@Test
	void testHashComputation_SHA_256() {
		sha256 = new SHA_256("a");
		assertEquals("ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb", sha256.computeHash());
	}

	@Test
	void testHashComputation2_SHA_256() {
		sha256 = new SHA_256(""); // empty string
		assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", sha256.computeHash());
	}
	
	@Test
	void testHashComputation3_SHA_256() {
		sha256 = new SHA_256("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("9f4390f8d30c2dd92ec9f095b65e2b9ae9b0a925a5258e241c9f1e910f734318", sha256.computeHash());
	}

	@Test
	void testHashComputation4_SHA_256() {
		sha256 = new SHA_256("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("b35439a4ac6f0948b6d6f9e3c6af0f5f590ce20f1bde7090ef7970686ec6738a", sha256.computeHash());
	}
	
	@Test
	void testHashComputation5_SHA_256() {
		sha256 = new SHA_256(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		assertEquals("cb2a9233adc1225c5c495c46e62cf6308223c5e241ef33ad109f03141b57966a", sha256.computeHash());
	}

	@Test
	void testHashComputation6_SHA_256() {
		sha256 = new SHA_256("jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals("b5309136b68ba3506388149a71be42699a8a12bcf6c27891472664680b687b55", sha256.computeHash());
	}
	
	@Test
	void testHashComputation7_SHA_256() {
		sha256 = new SHA_256("jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829A");
		assertEquals("a99b2e5ff1db9f5985bc1de6065c3dbab32a4f8c99e30aba4fe516a7978ad748", sha256.computeHash());
	}

	@Test
	void testHashComputation8_SHA_256() {
		sha256 = new SHA_256("And what is love? It is a doll dressed up For idleness to cosset, nurse, and dandle; A thing of soft misnomers, so divine That silly youth doth think to make itself Divine by loving, and so goes on Yawning and doting a whole summer long, Till Miss's comb is made a perfect tiara, And common Wellingtons turn Romeo boots; Till Cleopatra lives at Number Seven, And Antony resides in Brunswick Square.");
		assertEquals("9bbbd77600ee390ab31746a11a6202182572158766295d8919ab3c90123f2a14", sha256.computeHash());
	}

	// SHA-224
	@Test
	void testHashComputation_SHA_224() {
		sha224 = new SHA_224("a");
		assertEquals("abd37534c7d9a2efb9465de931cd7055ffdb8879563ae98078d6d6d5", sha224.computeHash());
	}
	
	@Test
	void testHashComputation2_SHA_224() {
		sha224 = new SHA_224(""); // empty string
		assertEquals("d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f", sha224.computeHash());
	}
	
	@Test
	void testHashComputation3_SHA_224() {
		sha224 = new SHA_224("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("fb0bd626a70c28541dfa781bb5cc4d7d7f56622a58f01a0b1ddd646f", sha224.computeHash());
	}
	
	@Test
	void testHashComputation4_SHA_224() {
		sha224 = new SHA_224("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		assertEquals("d40854fc9caf172067136f2e29e1380b14626bf6f0dd06779f820dcd", sha224.computeHash());
	}
	
	@Test
	void testHashComputation5_SHA_224() {
		sha224 = new SHA_224(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		assertEquals("88cc8b6a9c95f8322361f219efb3309020b865fbe0bc0e580c442ff1", sha224.computeHash());
	}
	
	@Test
	void testHashComputation6_SHA_224() {
		sha224 = new SHA_224("jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829");
		assertEquals("de71734bcdd6e336732466572da170ae12034b2434d1d7821ac63066", sha224.computeHash());
	}
	
	@Test
	void testHashComputation7_SHA_224() {
		sha224 = new SHA_224("jsjsandsnsaocmwakodojnansnkdksdskdsjsdjadsjkdskdsmwmwkwwekwmewmemqkdskdkdsksdksd,wpq82373280bsd782i123;sksks101019282829A");
		assertEquals("4794eb16378a30b6f467c4888193ae64699a38345ed6d25458031bd6", sha224.computeHash());
	}
	
	@Test
	void testHashComputation8_SHA_224() {
		sha224 = new SHA_224("And what is love? It is a doll dressed up For idleness to cosset, nurse, and dandle; A thing of soft misnomers, so divine That silly youth doth think to make itself Divine by loving, and so goes on Yawning and doting a whole summer long, Till Miss's comb is made a perfect tiara, And common Wellingtons turn Romeo boots; Till Cleopatra lives at Number Seven, And Antony resides in Brunswick Square.");
		assertEquals("07fefa4dd58d9aba6210e6efdc19f5d56bc0195ff78e72ef2cdc6291", sha224.computeHash());
	}

}
