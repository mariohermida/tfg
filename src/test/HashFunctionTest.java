package test;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import shs.*;

class HashFunctionTest {

	private HashFunction h = new HashFunction();
	private DataTreatment d = new DataTreatment();
	private SHA_1 sha1;

	@Test
	void testRightShiftOperation() {
		assertEquals("111010", h.rightShiftOperation("111010", 0));
	}

	@Test
	void testRightShiftOperation2() {
		assertEquals("011101", h.rightShiftOperation("111010", 1));
	}

	@Test
	void testRightShiftOperation3() {
		assertEquals("000001", h.rightShiftOperation("111010", 5));
	}

	@Test
	void testRightShiftOperation4() {
		assertEquals("000000", h.rightShiftOperation("111010", 15));
	}

	@Test
	void testRightShiftOperation5() {
		assertEquals("00111010001011000101001010010101", h.rightShiftOperation("11101000101100010100101001010101", 2));
	}

	@Test
	void testRightShiftOperation6() {
		assertEquals("00000000000000000111010001011000", h.rightShiftOperation("11101000101100010100101001010101", 17));
	}

	@Test
	void testRightShiftOperation7() {
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100",
				h.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testRightShiftOperation8() {
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010",
				h.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testRightShiftOperationException() {
		assertThrows(NumberFormatException.class, () -> {
			h.rightShiftOperation("111010", -9);
		});
	}

	@Test
	void testSHR() {
		assertEquals("111010", h.SHR("111010", 0));
	}

	@Test
	void testSHR2() {
		assertEquals("011101", h.SHR("111010", 1));
	}

	@Test
	void testSHR3() {
		assertEquals("000001", h.SHR("111010", 5));
	}

	@Test
	void testSHR4() {
		assertEquals("000000", h.SHR("111010", 15));
	}

	@Test
	void testSHR5() {
		assertEquals("00111010001011000101001010010101", h.SHR("11101000101100010100101001010101", 2));
	}

	@Test
	void testSHR6() {
		assertEquals("00000000000000000111010001011000", h.SHR("11101000101100010100101001010101", 17));
	}

	@Test
	void testSHR7() {
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100",
				h.SHR("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testSHR8() {
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010",
				h.SHR("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testSHRException() {
		assertThrows(NumberFormatException.class, () -> {
			h.SHR("11", -999);
		});
	}

	@Test
	void testLeftShiftOperation() {
		assertEquals("111010", h.leftShiftOperation("111010", 0));
	}

	@Test
	void testLeftShiftOperation2() {
		assertEquals("110110", h.leftShiftOperation("111011", 1));
	}

	@Test
	void testLeftShiftOperation3() {
		assertEquals("100000", h.leftShiftOperation("111011", 5));
	}

	@Test
	void testLeftShiftOperation4() {
		assertEquals("000000", h.leftShiftOperation("111011", 15));
	}

	@Test
	void testLeftShiftOperation5() {
		assertEquals("10100010110001010010100101010100", h.leftShiftOperation("11101000101100010100101001010101", 2));
	}

	@Test
	void testLeftShiftOperation6() {
		assertEquals("10010100101010100000000000000000", h.leftShiftOperation("11101000101100010100101001010101", 17));
	}

	@Test
	void testLeftShiftOperation7() {
		assertEquals("1001010010010010101010011101001010101010101101001100101000000000",
				h.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testLeftShiftOperation8() {
		assertEquals("0101000000000000000000000000000000000000000000000000000000000000",
				h.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testLeftShiftOperationException() {
		assertThrows(NumberFormatException.class, () -> {
			h.leftShiftOperation("111010", -1);
		});
	}

	@Test
	void testROTR() {
		assertEquals("111010", h.ROTR("111010", 0));
		assertEquals("110101", h.ROTR("111010", 5));
		// 32 bits
		assertEquals("01111010001011000101001010010101", h.ROTR("11101000101100010100101001010101", 2));
		assertEquals("10100101001010101111010001011000", h.ROTR("11101000101100010100101001010101", 17));
		// 64 bits
		assertEquals("1100101001010010100101001001001010101001110100101010101010110100",
				h.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 8));
		assertEquals("0101001010010010010101010011101001010101010101101001100101001010",
				h.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testROTR2() {
		assertEquals("011101", h.ROTR("111010", 1));
	}

	@Test
	void testROTR3() {
		assertEquals("110101", h.ROTR("111010", 5));
	}

	@Test
	void testROTR4() {
		assertEquals("01111010001011000101001010010101", h.ROTR("11101000101100010100101001010101", 2));
	}

	@Test
	void testROTR5() {
		assertEquals("10100101001010101111010001011000", h.ROTR("11101000101100010100101001010101", 17));
	}

	@Test
	void testROTR6() {
		assertEquals("1100101001010010100101001001001010101001110100101010101010110100",
				h.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTR7() {
		assertEquals("0101001010010010010101010011101001010101010101101001100101001010",
				h.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testROTRException() {
		assertThrows(NumberFormatException.class, () -> {
			h.ROTR("1110", -19);
		});
	}

	@Test
	void testROTL() {
		assertEquals("111010", h.ROTL("111010", 0));
	}

	@Test
	void testROTL2() {
		assertEquals("110111", h.ROTL("111011", 1));
	}

	@Test
	void testROTL3() {
		assertEquals("111101", h.ROTL("111011", 5));
	}

	@Test
	void testROTL4() {
		assertEquals("10100010110001010010100101010111", h.ROTL("11101000101100010100101001010101", 2));
	}

	@Test
	void testROTL5() {
		assertEquals("10010100101010111101000101100010", h.ROTL("11101000101100010100101001010101", 17));
	}

	@Test
	void testROTL6() {
		assertEquals("1001010010010010101010011101001010101010101101001100101001010010",
				h.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTL7() {
		assertEquals("0101001010010100101001001001010101001110100101010101010110100110",
				h.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 59));
	}

	@Test
	void testROTLException() {
		assertThrows(NumberFormatException.class, () -> {
			h.ROTL("111010", -5);
		});
	}

	@Test
	void testROTLROTR() {
		assertEquals(h.ROTR("0101001010010100100100101010100111010010101010101011010011001010", 56),
				h.ROTL("0101001010010100100100101010100111010010101010101011010011001010", 8));
	}

	@Test
	void testROTLROTR2() {
		assertEquals(h.ROTR("0101010100001010011110101010101010101010010110011010101111101010", 5),
				h.ROTL("0101010100001010011110101010101010101010010110011010101111101010", 59));
	}

	@Test
	void testCh() {
		assertEquals("0001001111110001001000001000111000101010010101100010010001100111",
				h.Ch("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testParity() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				h.Parity("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testMaj() {
		assertEquals("0111001101110001000000111110100010101010011111110010010101011101",
				h.Maj("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010"));
	}

	@Test
	void testF() {
		assertEquals("0001001111110001001000001000111000101010010101100010010001100111",
				h.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 0));
	}
	
	@Test
	void testF2() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				h.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 39));
	}
	
	@Test
	void testF3() {
		assertEquals("0111001101110001000000111110100010101010011111110010010101011101",
				h.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 40));
	}
	
	@Test
	void testF4() {
		assertEquals("1001110011011011001110000001011001001100110000001111110010100010",
				h.f("0111101101010011000000110111000011001100011011110110110110011101",
						"1001011101111001000110001000100000101010110101101011010001000101",
						"0111000011110001001000111110111010101010011110010010010101111010", 79));
	}
	
	@Test
	void testFException() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.f("0111101101010011000000110111000011001100011011110110110110011101",
					"1001011101111001000110001000100000101010110101101011010001000101",
					"0111000011110001001000111110111010101010011110010010010101111010", 80);
		});
	}

	@Test
	void testUpperSigma256_0_32bits() {
		assertEquals("00010101101101001101100111111000",
				h.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "upper", 0));
	}

	@Test
	void testUpperSigma256_1_32bits() {
		assertEquals("11000001001000100101111110000001",
				h.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "upper", 1));
	}

	@Test
	void testLowerSigma256_0_32bits() {
		assertEquals("10010010111110010000011110001000",
				h.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "lower", 0));
	}

	@Test
	void testLowerSigma256_1_32bits() {
		assertEquals("00101111000101011110100000111010",
				h.sigmaFunctionSplitter("01111010111010000100110101000111", 32, "lower", 1));
	}

	@Test
	void testUpperSigma512_0_64bits() {
		assertEquals("1111001100100011101110010001011001001000010000111000010111001111", h.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "upper", 0));
	}

	@Test
	void testUpperSigma512_1_64bits() {
		assertEquals("1001100000001101011001100001100010000110110111010010111000000101", h.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "upper", 1));
	}

	@Test
	void testLowerSigma512_0_64bits() {
		assertEquals("1001111010101011001010011010010100111010110101000100000000001100", h.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "lower", 0));
	}

	@Test
	void testLowerSigma512_1_64bits() {
		assertEquals("0011000001011101000000010011001011100000101110000111110101111001", h.sigmaFunctionSplitter(
				"1001000000110110111001010001010000001101100001011001110101010111", 64, "lower", 1));
	}

	@Test
	void testSigmaFunctionSplitterException() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 32, "lower",
					-1);
		});
	}

	@Test
	void testSigmaFunctionSplitterException2() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 32, "upper",
					-55);
		});
	}

	@Test
	void testSigmaFunctionSplitterException3() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 64, "LOWER", 0);
		});
	}

	@Test
	void testSigmaFunctionSplitterException4() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 64, "lower", 3);
		});
	}

	@Test
	void testSigmaFunctionSplitterException5() {
		assertThrows(IllegalArgumentException.class, () -> {
			h.sigmaFunctionSplitter("1100101001010010100101001001001010101001110100101010101010110100", 128, "lower",
					1);
		});
	}

	@Test
	void testPadMessage() {
		sha1 = new SHA_1(d.textToBinary("abc"));
		assertEquals(
				
				sha1.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage2() {
		sha1 = new SHA_1(d.textToBinary(""));
		assertEquals(
				"00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
				sha1.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage3() { // This test must be changed by the one below
		sha1 = new SHA_1(d.textToBinary("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
		assertEquals(
				"01100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010000000000000000000000000000000000000000000000000000000111000000",
				sha1.getBinaryMessagePadded());
	}

	@Test
	void testPadMessage4() {
		sha1 = new SHA_1(d.textToBinary("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
		assertEquals(
				
				sha1.getBinaryMessagePadded());
	}

}
