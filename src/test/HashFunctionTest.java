package test;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import shs.HashFunction;

class HashFunctionTest {
	
	private HashFunction h = new HashFunction();
	
	@Test
	void testRightShiftOperation() {
		assertEquals("011101", h.rightShiftOperation("111010",1));
		assertEquals("000001", h.rightShiftOperation("111010",5));
		assertEquals("000000", h.rightShiftOperation("111010",15));
		//32 bits
		assertEquals("00111010001011000101001010010101", h.rightShiftOperation("11101000101100010100101001010101",2));
		assertEquals("00000000000000000111010001011000", h.rightShiftOperation("11101000101100010100101001010101",17));
		//64 bits
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100", h.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010",8));
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010", h.rightShiftOperation("0101001010010100100100101010100111010010101010101011010011001010",59));
	}
	
	@Test
	void testSHR() {
		assertEquals("011101", h.SHR("111010",1));
		assertEquals("000001", h.SHR("111010",5));
		assertEquals("000000", h.SHR("111010",15));
		//32 bits
		assertEquals("00111010001011000101001010010101", h.SHR("11101000101100010100101001010101",2));
		assertEquals("00000000000000000111010001011000", h.SHR("11101000101100010100101001010101",17));
		//64 bits
		assertEquals("0000000001010010100101001001001010101001110100101010101010110100", h.SHR("0101001010010100100100101010100111010010101010101011010011001010",8));
		assertEquals("0000000000000000000000000000000000000000000000000000000000001010", h.SHR("0101001010010100100100101010100111010010101010101011010011001010",59));
	}
	
	@Test
	void testLeftShiftOperation() {
		assertEquals("110110", h.leftShiftOperation("111011",1));
		assertEquals("100000", h.leftShiftOperation("111011",5));
		assertEquals("000000", h.leftShiftOperation("111011",15));
		//32 bits
		assertEquals("10100010110001010010100101010100", h.leftShiftOperation("11101000101100010100101001010101",2));
		assertEquals("10010100101010100000000000000000", h.leftShiftOperation("11101000101100010100101001010101",17));
		//64 bits 
		assertEquals("1001010010010010101010011101001010101010101101001100101000000000", h.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010",8));
		assertEquals("0101000000000000000000000000000000000000000000000000000000000000", h.leftShiftOperation("0101001010010100100100101010100111010010101010101011010011001010",59));
	}
	
	@Test
	void testROTR() {
		assertEquals("011101", h.ROTR("111010",1));
		assertEquals("110101", h.ROTR("111010",5));
		//32 bits
		assertEquals("01111010001011000101001010010101", h.ROTR("11101000101100010100101001010101",2));
		assertEquals("10100101001010101111010001011000", h.ROTR("11101000101100010100101001010101",17));
		//64 bits
		assertEquals("1100101001010010100101001001001010101001110100101010101010110100", h.ROTR("0101001010010100100100101010100111010010101010101011010011001010",8));
		assertEquals("0101001010010010010101010011101001010101010101101001100101001010", h.ROTR("0101001010010100100100101010100111010010101010101011010011001010",59));
	}
	
	@Test
	void testROTL() {
		assertEquals("110111", h.ROTL("111011",1));
		assertEquals("111101", h.ROTL("111011",5));
		//32 bits
		assertEquals("10100010110001010010100101010111", h.ROTL("11101000101100010100101001010101",2));
		assertEquals("10010100101010111101000101100010", h.ROTL("11101000101100010100101001010101",17));
		//64 bits 
		assertEquals("1001010010010010101010011101001010101010101101001100101001010010", h.ROTL("0101001010010100100100101010100111010010101010101011010011001010",8));
		assertEquals("0101001010010100101001001001010101001110100101010101010110100110", h.ROTL("0101001010010100100100101010100111010010101010101011010011001010",59));
	}

}
